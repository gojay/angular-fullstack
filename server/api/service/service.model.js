'use strict';

var mongoose = require('bluebird').promisifyAll(require('mongoose'));
var Schema = mongoose.Schema;
var tree = require('mongoose-path-tree');
var _ = require('lodash');
var Q = require('q');

var ServiceSchema = new Schema({
  name: String,
  price: { type: Number, default: 0 },
  isRoot: { type: Boolean, default: false }
});

ServiceSchema.statics = {
	getRoots() {
		return this.findOne({ isRoot: true }).select('_id').exec()
			.then((root) => {
				if(!root) return [];
				return this.find({ parent: root._id }).select('name price').exec();
			});
	},

  getAll() {
    return this.findOne({ isRoot: true }).exec().then((root) => {
      if(!root) return [];
      return Q.Promise((resolve, reject) => {
        root.getChildrenTree({ fields: '_id name price isRoot' }, (err, result) => {
          if(err) {
            reject(err)
          } else {
            var obj = root.toObject();
            obj.children = result;
            resolve([obj]);
          }
        });
      })
    });
  },

	getChildren() {
		return this.findOne({ isRoot: true }).exec().then((root) => {
			if(!root) return [];
			return Q.Promise((resolve, reject) => {
      	root.getChildrenTree({ fields: 'name price isRoot' }, (err, result) => {
      		if(err) {
      			reject(err)
      		} else {
      			resolve(result);
      		}
      	});
			})
    });
	},

	getCosts(filter) {
		var find = _.isObject(filter) ? this.findOne(filter) : this.findById(filter);
		return find.exec()
      .then((service) => {
      	if(!service) return { services: [], cost: 0 };
      	return Q.Promise((resolve, reject) => {
	        service.getAncestors({ isRoot: false }, 'name price', (err, result) => {
	        	if(err) return reject(err);
	          result.push(_.pick(service, ['name', 'price']));
	          resolve({ services: result, cost: _.sum(result, 'price') });
	        });
      	})
      });
	},

  add(data) {
    return this.findById(data.parent).exec().then((parent) => {
      if(!parent) throw new Error('Parent not found');
      var newService = _.pick(data, ['name', 'price', 'uparent'])
      var service = new this(newService);
      service.parent = parent;
      return service.savePromise();
    });
  }
};

ServiceSchema.methods = {
	savePromise() {
    return Q.Promise((resolve, reject) => {
    	this.save((err, result) => {
      	if(err) return reject(err);
      	resolve(result);
    	});
    });
	}
};

ServiceSchema.plugin(tree, {
  pathSeparator : '#',              // Default path separator
  onDelete :      'REPARENT',       // Can be set to 'DELETE' or 'REPARENT'. Default: 'REPARENT'
  numWorkers:     5,           			// Number of stream workers
  idType:         Schema.ObjectId  	// Type used for _id. Can be, for example, String generated by shortid module
});

module.exports = mongoose.model('Service', ServiceSchema);
